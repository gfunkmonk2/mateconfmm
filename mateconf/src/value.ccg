// -*- Mode: C++; c-basic-offset: 4  -*-
/* $Id: value.ccg,v 1.2 2005/01/11 12:08:16 murrayc Exp $ */

/* value.hg
 * 
 * Copyright (C) 2000-2002 MateConfmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <mateconf/mateconf.h>
#include "mateconfmm/schema.h"

namespace
{

//gmmproc guesses the mateconf prefix wrongly, so we help it:
inline static GType g_conf_value_type_get_type()
{
  return mateconf_value_type_get_type();
}

inline static GType g_conf_unset_flags_get_type()
{
  return mateconf_unset_flags_get_type();
}

} //anonymous namespace

namespace Mate
{

namespace Conf
{

void ValueTraits::release_c_type(MateConfValue* ptr)
{
  mateconf_value_free(ptr);
}
  

MateConfValue* ValueSchemaTraits::to_c_type(const Schema& ptr)
{
  MateConfValue* v = mateconf_value_new(MATECONF_VALUE_SCHEMA);
  mateconf_value_set_schema(v, ptr.gobj());
  return v;
}

Schema ValueSchemaTraits::to_cpp_type(MateConfValue* ptr)
{
  return Schema(mateconf_value_get_schema(ptr), true);
}

MateConfValue* ValueStringTraits::to_c_type(const Glib::ustring& ptr)
{
  MateConfValue* v = mateconf_value_new(MATECONF_VALUE_STRING);
  mateconf_value_set_string(v,ptr.c_str());
  return v;
}

Glib::ustring ValueStringTraits::to_cpp_type(MateConfValue* ptr)
{
  return Glib::ustring(mateconf_value_get_string(ptr));
}

MateConfValue* ValueIntTraits::to_c_type(const int& ptr)
{
  MateConfValue* v = mateconf_value_new(MATECONF_VALUE_INT);
  mateconf_value_set_int(v,ptr);
  return v;
}

int ValueIntTraits::to_cpp_type(MateConfValue* ptr)
{
  return mateconf_value_get_int(ptr);
}

MateConfValue* ValueBoolTraits::to_c_type(const bool& ptr)
{
  MateConfValue* v = mateconf_value_new(MATECONF_VALUE_BOOL);
  mateconf_value_set_bool(v, ptr);
  return v;
}

bool ValueBoolTraits::to_cpp_type(MateConfValue* ptr)
{
  return (bool)mateconf_value_get_bool(ptr);
}

MateConfValue* ValueFloatTraits::to_c_type(const double& ptr)
{
  MateConfValue* v = mateconf_value_new(MATECONF_VALUE_FLOAT);
  mateconf_value_set_float(v,ptr);
  return v;
}

double ValueFloatTraits::to_cpp_type(MateConfValue* ptr)
{
  return mateconf_value_get_float(ptr);
}


Value::Value(ValueType type)
  : gobject_(0)
{
  if(type != VALUE_INVALID)
    gobject_ = mateconf_value_new((MateConfValueType)type);
}

ValueType Value::get_type() const 
{
  if(gobject_ == 0)
    return VALUE_INVALID;

  return (ValueType)gobj()->type;
}

Value Value::get_car() const
{
  return Value(mateconf_value_get_car(gobj()), true);
}

Value Value::get_cdr() const
{
  return Value(mateconf_value_get_cdr(gobj()), true);
}

Schema Value::get_schema() const
{
  return Schema(mateconf_value_get_schema(gobj()), true);
}

} /* namespace Conf */
} /* namespace Mate */
